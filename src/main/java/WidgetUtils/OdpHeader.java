/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package WidgetUtils;

import com.neptune.common.DataHolder;
import static com.neptune.common.DataHolder.odpFileSecondaryBackupPath;
import static com.neptune.common.DataHolder.odpPrimaryBackupFile;
import com.neptune.common.OdpEditEnum;
import com.neptune.player.StreamPlayer;
import com.neptune.schema.Odpmedia;
import com.neptune.schema.Odpmedia.Playlist;
import com.neptune.schema.Odpmedia.Playlist.Track;
import com.neptune.util.DateUtil;
import com.neptune.util.HelperUtility;
import com.neptune.util.JTextFieldLimit;
import com.neptune.util.MouseClickEventMethods;
import com.neptune.util.NeptuneLogger;
import com.neptune.util.PlayListUtils;
import com.neptune.webservice.odp.ExchangeODPService;
import com.neptune.webservice.odp.ODP;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.nio.file.FileSystems;
import java.util.Date;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.TreeSet;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Marshaller;
import javax.xml.bind.Unmarshaller;
import org.apache.commons.io.FileUtils;

/**
 *
 * @author ragesh.raveendran
 */
public class OdpHeader extends javax.swing.JPanel {

    /**
     * Creates new form OdpHeader
     */
    public OdpHeader() {
        initComponentsManually();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        odpHeaderLabel = new javax.swing.JLabel();
        odpBuildButton = new javax.swing.JButton();
        odpEditButton = new javax.swing.JButton();
        odpSaveButton = new javax.swing.JButton();
        counter = new javax.swing.JLabel();
        odpEditButton1 = new javax.swing.JButton();

        setPreferredSize(new java.awt.Dimension(266, 197));
        setRequestFocusEnabled(false);

        odpHeaderLabel.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        odpHeaderLabel.setText("ON DEMAND PLAYLIST");

        odpBuildButton.setText("BUILD");
        odpBuildButton.setName("buildButton"); // NOI18N
        odpBuildButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                odpBuildButtonMouseClicked(evt);
            }
        });
        odpBuildButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                odpBuildButtonActionPerformed(evt);
            }
        });

        odpEditButton.setText("EDIT");
        odpEditButton.setName("editButton"); // NOI18N
        odpEditButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                odpEditButtonActionPerformed(evt);
            }
        });

        odpSaveButton.setText("SAVE");
        odpSaveButton.setName("saveButton"); // NOI18N
        odpSaveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                odpSaveButtonActionPerformed(evt);
            }
        });

        counter.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        counter.setText("00:00");

        odpEditButton1.setText("DELETE");
        odpEditButton1.setName("editButton"); // NOI18N
        odpEditButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                odpEditButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(odpHeaderLabel)
                .addContainerGap(32, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(odpBuildButton, javax.swing.GroupLayout.DEFAULT_SIZE, 153, Short.MAX_VALUE)
                    .addComponent(odpSaveButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(odpEditButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(odpEditButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(counter)
                .addGap(105, 105, 105))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(odpHeaderLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 42, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(odpBuildButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(odpSaveButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(odpEditButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(odpEditButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(counter)
                .addGap(6, 6, 6))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void initComponentsManually() {

        DataHolder.odpHeaderLabel = new javax.swing.JLabel();
        DataHolder.odpBuildButton = new javax.swing.JButton();
        DataHolder.odpEditButton = new javax.swing.JButton();
        DataHolder.odpDeleteButton = new javax.swing.JButton();
        DataHolder.odpSaveButton = new javax.swing.JButton();
        DataHolder.odpMaxTime = new javax.swing.JLabel();

        DataHolder.odpEditButton.setEnabled(false);
        DataHolder.odpDeleteButton.setEnabled(false);
        DataHolder.odpSaveButton.setEnabled(false);

        setPreferredSize(new java.awt.Dimension(266, 197));
        setRequestFocusEnabled(false);

        DataHolder.odpHeaderLabel.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        DataHolder.odpHeaderLabel.setText("ON DEMAND PLAYLIST");

        DataHolder.odpBuildButton.setText("BUILD");
        DataHolder.odpBuildButton.setName("buildButton"); // NOI18N
        DataHolder.odpBuildButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                odpBuildButtonMouseClicked(evt);
            }
        });
        DataHolder.odpBuildButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                odpBuildButtonActionPerformed(evt);
            }
        });

        DataHolder.odpEditButton.setText("EDIT");
        DataHolder.odpEditButton.setName("editButton"); // NOI18N
        DataHolder.odpEditButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                odpEditButtonActionPerformed(evt);
            }
        });

        DataHolder.odpDeleteButton.setText("DELETE");
        DataHolder.odpDeleteButton.setName("deleteButton"); // NOI18N
        DataHolder.odpDeleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
                    odpDeleteButtonActionPerformed(evt);
                } catch (JAXBException ex) {
                    Logger.getLogger(OdpHeader.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

            private void odpDeleteButtonActionPerformed(ActionEvent evt) throws JAXBException {
                OndemandPlaylistPanel panel = (OndemandPlaylistPanel) DataHolder.playList.getValueAt(
                        DataHolder.playList.getSelectedRow(), DataHolder.playList.getSelectedColumn());
                if (null != panel) {
                    Iterator iter = DataHolder.odpMedia.playlist.iterator();
                    Playlist playlist = null;
                    while (iter.hasNext()) {
                        playlist = (Playlist) iter.next();
                        if (panel.getSongTitleLabel().getText().equalsIgnoreCase(playlist.getId())) {
                            iter.remove();
                            JAXBContext jaxbContext = JAXBContext.newInstance(Odpmedia.class);
                            Marshaller jaxbmarshaller = jaxbContext.createMarshaller();
                            jaxbmarshaller.marshal(DataHolder.odpMedia, new File(DataHolder.odpFilePath));
                            HelperUtility.cleanOdpPlaylist();
//                            List all the saved ODP
                            MouseClickEventMethods.odpPlayListButtonMouseClickeEvent(null);
                            playlist = null;
                            new Thread(new Runnable() {
                                public void run() {
                                    try {
                                        if (DataHolder.odpFilePath != null) {
                                            if (DataHolder.odpFile.exists()) {
                                                FileUtils.copyFile(DataHolder.odpFile, DataHolder.odpPrimaryBackupFile);
                                                DataHolder.odpSecondaryBackupFile = new File(odpFileSecondaryBackupPath + FileSystems.getDefault().getSeparator()
                                                        + DateUtil.getInstance().formatDate(new Date(), DateUtil.DATE_FORMAT_MMDDYYYY) + ".bk");
                                                if (!DataHolder.odpSecondaryBackupFile.getParentFile().exists()) {
                                                    DataHolder.odpSecondaryBackupFile.getParentFile().mkdirs();
                                                }
                                                if (!DataHolder.odpSecondaryBackupFile.exists()) {
                                                    DataHolder.odpSecondaryBackupFile.createNewFile();
                                                }
                                                FileUtils.copyFile(DataHolder.odpFile, DataHolder.odpSecondaryBackupFile);
                                                ExchangeODPService exchangeODPService = new ExchangeODPService();
                                                ODP odp = new ODP();
                                                odp.setPartnerName(DataHolder.configProperties.getProperty("userName"));
                                                odp.setMacID(DataHolder.macAddress);
                                                odp.setToken(DataHolder.configProperties.getProperty("DeviceToken"));
                                                BufferedReader bufferedReader = new BufferedReader(new FileReader(DataHolder.odpFile));
                                                StringBuilder stringBuilder = new StringBuilder();
                                                String line = null;
                                                while ((line = bufferedReader.readLine()) != null) {
                                                    stringBuilder.append(line).append("\n");
                                                }
                                                odp.setBackUpText(stringBuilder.toString());
                                                exchangeODPService.getExchangeODPServiceSoap().setODPBackUp(odp);
                                                NeptuneLogger.getInstance().getLogger().log(Level.INFO, "ODP BackUp ----> SUCCESSFULL");
                                            }
                                        }
                                    } catch (Exception e) {
                                        NeptuneLogger.getInstance().getLogger().log(Level.SEVERE, "ODP BackUp ----> UNSUCCESSFULL", e);
                                    }
                                }
                            }).start();
                            break;
                        }
                    }
                }
            }
        });

        DataHolder.odpSaveButton.setText("SAVE");
        DataHolder.odpSaveButton.setName("saveButton"); // NOI18N
        DataHolder.odpSaveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                odpSaveButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addComponent(DataHolder.odpHeaderLabel)
                        .addContainerGap(32, Short.MAX_VALUE))
                .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(DataHolder.odpBuildButton, javax.swing.GroupLayout.DEFAULT_SIZE, 153, Short.MAX_VALUE)
                                .addComponent(DataHolder.odpSaveButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(DataHolder.odpEditButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(DataHolder.odpDeleteButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(layout.createSequentialGroup()
                        .addGap(101, 101, 101)
                        .addComponent(DataHolder.odpMaxTime)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                        .addComponent(DataHolder.odpHeaderLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 48, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(DataHolder.odpBuildButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(DataHolder.odpSaveButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(DataHolder.odpEditButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(DataHolder.odpDeleteButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(DataHolder.odpMaxTime)
                        .addGap(22, 22, 22))
        );
    }
    private void odpEditButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_odpEditButtonActionPerformed
        DataHolder.odpModeStatus = OdpEditEnum.EDIT.toString();
        HelperUtility.cleanOdpPlaylist();
        DataHolder.isOdpEditLogoRequired = true;
        DataHolder.odpBuildButton.setEnabled(false);
        DataHolder.odpEditButton.setEnabled(false);
        DataHolder.odpDeleteButton.setEnabled(false);
        DataHolder.odpSaveButton.setEnabled(true);
        DataHolder.isPlaying = false;
        DataHolder.playerStatusLabel.setText("Player stopped");
        DataHolder.onDemandOverride = false;
        DataHolder.currentTrackLabel.setText("Stopped");
        DataHolder.nextTrackLabel.setText("Stopped");
        DataHolder.currenttrack = null;
        DataHolder.nextTrack = null;
        DataHolder.playListSelectedTrackPath = "";
        StreamPlayer.fadeOut();
        OndemandPlaylistPanel panel = (OndemandPlaylistPanel) DataHolder.playList.getValueAt(
                DataHolder.playList.getSelectedRow(), DataHolder.playList.getSelectedColumn());
        for (Playlist playlist : DataHolder.odpMedia.playlist) {
            if (playlist.id.equalsIgnoreCase(panel.getSongTitleLabel().getName())) {
                if (null == DataHolder.odpMedia) {
                    HelperUtility.initializeODPMedia();
                }
                DataHolder.odpPlaylistModel = (javax.swing.table.DefaultTableModel) DataHolder.odpPlayList.getModel();
                if (null == DataHolder.odpTrackList) {
                    DataHolder.odpTrackList = new LinkedList<Playlist.Track>();
                } else {
                    DataHolder.odpTrackList.clear();
                }
                //todo place when the edit goes wrong for odp
                for (Playlist.Track track : playlist.getTrack()) {
                    if (DataHolder.odpLastRow == DataHolder.odpPlayList.getRowCount()) {
                        DataHolder.odpPlaylistModel.addRow(new Object[]{});
                    }
                    DataHolder.odpTrackList.add(track);
                    HelperUtility.addOdpMaxtime(track.getTime());
                    DataHolder.odpPlaylistModel.setValueAt(track.getLabel(), DataHolder.odpLastRow, 0);
                    DataHolder.odpLastRow++;
                }
            }
        }
        HelperUtility.getOnDemandTrackListFromUpdatedMediaUpgraded(false);
        DataHolder.odpEditEnumStatus = OdpEditEnum.BUILD.toString();
    }//GEN-LAST:event_odpEditButtonActionPerformed

    private void odpSaveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_odpSaveButtonActionPerformed
        try {
            StreamPlayer.fadeOut();
            JAXBContext jaxbContext = JAXBContext.newInstance(Odpmedia.class);
            Marshaller jaxbmarshaller = jaxbContext.createMarshaller();
            for (Playlist playlist1 : DataHolder.odpMedia.getPlaylist()) {
                Long i = 0L;
                for (Track track : playlist1.getTrack()) {
                    track.setId(i);
                    i++;
                }
            }
            switch (OdpEditEnum.valueOf(DataHolder.odpModeStatus.toUpperCase())) {
                case BUILD:
                    boolean odpSaved = false;
                    while (!odpSaved) {
                        odpSaved = true;
                        DataHolder.odpBuildButton.setEnabled(true);
                        DataHolder.odpPlaylistButton.setEnabled(true);
                        JTextField odpPlaylistName = new JTextField();
                        odpPlaylistName.setColumns(30);
                        odpPlaylistName.setSize(new Dimension(150, 60));
                        odpPlaylistName.setDocument(new JTextFieldLimit(30));
                        odpPlaylistName.setText("");

                        JButton cancel = new JButton("Cancel");
                        final JComponent[] inputs = new JComponent[]{
                            new JLabel("Please provide ODP name."),
                            odpPlaylistName,};
                        JOptionPane.showMessageDialog(null, inputs, "ODP Playlist", JOptionPane.ERROR_MESSAGE);
                        if (odpPlaylistName.getText().isEmpty()) {
                            odpPlaylistName.setText("DefaultODP");
                        }
//                        check if there is already a playlist with the same name
                        for (Playlist playlist : DataHolder.odpMedia.getPlaylist()) {
                            if (playlist.getId().equalsIgnoreCase(odpPlaylistName.getText())) {
                                JOptionPane.showMessageDialog(null, playlist.getId() + " already Exists. Please choose a different name.", "ODP Playlist with same name exists", JOptionPane.ERROR_MESSAGE);
                                odpSaved = false;//sets unsaved msg after displaying a dialogue
                                break;
                            }
                        }
//                        save the odp if there is no playlist with same name already in the odp media
                        if (odpSaved) {
                            Playlist playlist = new Playlist();
                            playlist.setId(odpPlaylistName.getText());
                            playlist.setTrack(DataHolder.odpTrackList);
                            playlist.setDate(DateUtil.getInstance().formatDate(new Date(), DateUtil.DATE_FORMAT_YYMMDD));
                            DataHolder.odpMedia.getPlaylist().add(playlist);
                            if (null != DataHolder.odpMedia && DataHolder.odpMedia.getPlaylist() != null && DataHolder.odpMedia.getPlaylist().size() > 0) {
                                jaxbmarshaller.marshal(DataHolder.odpMedia, DataHolder.odpFile);
                                FileUtils.copyFile(DataHolder.odpFile, DataHolder.odpPrimaryBackupFile);
                                DataHolder.odpSecondaryBackupFile = new File(odpFileSecondaryBackupPath + FileSystems.getDefault().getSeparator()
                                        + DateUtil.getInstance().formatDate(new Date(), DateUtil.DATE_FORMAT_MMDDYYYY) + ".bk");
                                if (!DataHolder.odpSecondaryBackupFile.getParentFile().exists()) {
                                    DataHolder.odpSecondaryBackupFile.getParentFile().mkdirs();
                                }
                                if (!DataHolder.odpSecondaryBackupFile.exists()) {
                                    DataHolder.odpSecondaryBackupFile.createNewFile();
                                }
                                FileUtils.copyFile(DataHolder.odpFile, DataHolder.odpSecondaryBackupFile);
                            }
                        }

                    }
                    HelperUtility.cleanOdpPlaylist();
                    break;
                case EDIT:
                    try {
                        if (null != DataHolder.odpMedia && DataHolder.odpMedia.getPlaylist() != null && DataHolder.odpMedia.getPlaylist().size() > 0) {
                            jaxbmarshaller.marshal(DataHolder.odpMedia, DataHolder.odpFile);
                            FileUtils.copyFile(DataHolder.odpFile, DataHolder.odpPrimaryBackupFile);
                            DataHolder.odpSecondaryBackupFile = new File(odpFileSecondaryBackupPath + FileSystems.getDefault().getSeparator()
                                    + DateUtil.getInstance().formatDate(new Date(), DateUtil.DATE_FORMAT_MMDDYYYY) + ".bk");
                            if (!DataHolder.odpSecondaryBackupFile.getParentFile().exists()) {
                                DataHolder.odpSecondaryBackupFile.getParentFile().mkdirs();
                            }
                            if (!DataHolder.odpSecondaryBackupFile.exists()) {
                                DataHolder.odpSecondaryBackupFile.createNewFile();
                            }
                            FileUtils.copyFile(DataHolder.odpFile, DataHolder.odpSecondaryBackupFile);
                        }
                    } catch (Exception e) {
                        NeptuneLogger.getInstance().getLogger().log(Level.SEVERE, null, e);
                    } finally {
                        HelperUtility.cleanOdpPlaylist();
                        PlayListUtils.playListMouseClickedWhenOnDemandOverrideIsOnInOdpListMode(null);
                    }
                    break;
            }
        } catch (JAXBException ex) {
            NeptuneLogger.getInstance().getLogger().log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(OdpHeader.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            DataHolder.odpModeStatus = OdpEditEnum.OFFLINE.toString();
            DataHolder.odpEditEnumStatus = OdpEditEnum.OFFLINE.toString();
            DataHolder.isOdpEditLogoRequired = false;
            DataHolder.odpBuildButton.setEnabled(true);
            DataHolder.odpSaveButton.setEnabled(false);
            DataHolder.odpEditButton.setEnabled(false);
            DataHolder.odpDeleteButton.setEnabled(false);
            DataHolder.odpPlaylistButton.setEnabled(true);
            if (null == DataHolder.odpPlayList) {
                DataHolder.odpTrackList = new LinkedList<Track>();
            } else {
                DataHolder.odpTrackList.clear();
                NeptuneLogger.getInstance().getLogger().log(Level.INFO, "Tracklist cleared...");
            }
            DataHolder.currentOdpPlaylist = "";
            new Thread(new Runnable() {
                public void run() {
                    try {
                        if (DataHolder.odpFilePath != null) {
                            if (!DataHolder.odpFile.exists()) {
                                FileUtils.copyFile(DataHolder.odpPrimaryBackupFile, DataHolder.odpFile);
                                DataHolder.odpSecondaryBackupFile = new File(odpFileSecondaryBackupPath + FileSystems.getDefault().getSeparator()
                                        + DateUtil.getInstance().formatDate(new Date(), DateUtil.DATE_FORMAT_MMDDYYYY) + ".bk");
                                if (!DataHolder.odpSecondaryBackupFile.getParentFile().exists()) {
                                    DataHolder.odpSecondaryBackupFile.getParentFile().mkdirs();
                                }
                                if (!DataHolder.odpSecondaryBackupFile.exists()) {
                                    DataHolder.odpSecondaryBackupFile.createNewFile();
                                }
                                FileUtils.copyFile(DataHolder.odpFile, DataHolder.odpSecondaryBackupFile);
                            }

                            if (DataHolder.odpFile.exists()) {
                                ExchangeODPService exchangeODPService = new ExchangeODPService();
                                ODP odp = new ODP();
                                odp.setPartnerName(DataHolder.configProperties.getProperty("userName"));
                                odp.setMacID(DataHolder.macAddress);
                                odp.setToken(DataHolder.configProperties.getProperty("DeviceToken"));
                                BufferedReader bufferedReader = new BufferedReader(new FileReader(DataHolder.odpFile));
                                StringBuilder stringBuilder = new StringBuilder();
                                String line = null;
                                while ((line = bufferedReader.readLine()) != null) {
                                    stringBuilder.append(line).append("\n");
                                }
                                odp.setBackUpText(stringBuilder.toString());
                                exchangeODPService.getExchangeODPServiceSoap().setODPBackUp(odp);
                                NeptuneLogger.getInstance().getLogger().log(Level.INFO, "SAVE --> ODPBackUp -----> SUCCESSFULL");
                            }
                        }
                    } catch (Exception e) {
                        NeptuneLogger.getInstance().getLogger().log(Level.SEVERE, "SAVE --> ODPBackUp -----> UNSUCCESSFULL", e);
                    }
                }
            }).start();
        }
    }//GEN-LAST:event_odpSaveButtonActionPerformed


    private void odpBuildButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_odpBuildButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_odpBuildButtonActionPerformed

    private void odpBuildButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_odpBuildButtonMouseClicked
        try {
            DataHolder.odpModeStatus = OdpEditEnum.BUILD.toString();
            DataHolder.odpBuildButton.setEnabled(false);
            DataHolder.odpEditButton.setEnabled(false);
            DataHolder.odpDeleteButton.setEnabled(false);
            DataHolder.odpSaveButton.setEnabled(true);
            if (null == DataHolder.odpTrackList) {
                DataHolder.odpTrackList = new LinkedList<Track>();
            } else {
                DataHolder.odpTrackList.clear();
                NeptuneLogger.getInstance().getLogger().log(Level.INFO, "Tracklist cleared...");
            }
            HelperUtility.cleanOdpPlaylist();
            DataHolder.odpPlaylistButton.setEnabled(false);
            if (!DataHolder.odpFile.exists()) {
                FileUtils.copyFile(DataHolder.odpPrimaryBackupFile, DataHolder.odpFile);
            }
            if (DataHolder.odpFile.exists()) {
                NeptuneLogger.getInstance().getLogger().log(Level.INFO, "Parsing existing file....");
                try {
                    JAXBContext jaxbContext = JAXBContext.newInstance(Odpmedia.class);
                    Unmarshaller jaxbUnmarshaller = jaxbContext.createUnmarshaller();
                    DataHolder.odpMedia = (Odpmedia) jaxbUnmarshaller.unmarshal(DataHolder.odpFile);
                } catch (JAXBException ex) {
                    NeptuneLogger.getInstance().getLogger().log(Level.SEVERE, null, ex);
                }
            } else {
                NeptuneLogger.getInstance().getLogger().log(Level.INFO, "Creating new odp");
                HelperUtility.initializeODPMedia();
            }
        } catch (IOException ex) {
            Logger.getLogger(OdpHeader.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_odpBuildButtonMouseClicked

    private void odpEditButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_odpEditButton1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_odpEditButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel counter;
    private javax.swing.JButton odpBuildButton;
    private javax.swing.JButton odpEditButton;
    private javax.swing.JButton odpEditButton1;
    private javax.swing.JLabel odpHeaderLabel;
    private javax.swing.JButton odpSaveButton;
    // End of variables declaration//GEN-END:variables

}
