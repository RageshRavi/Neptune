/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.neptune.widgetutils;

import WidgetUtils.OndemandPlaylistPanel;
import com.neptune.common.DataHolder;
import static com.neptune.common.DataHolder.odpFileSecondaryBackupPath;
import com.neptune.common.OdpEditEnum;
import com.neptune.player.StreamPlayer;
import com.neptune.scheduler.ScheduledTask;
import com.neptune.schema.Odpmedia;
import com.neptune.util.DateUtil;
import com.neptune.util.HelperUtility;
import com.neptune.util.MouseClickEventMethods;
import com.neptune.util.NeptuneLogger;
import com.neptune.util.PlayListUtils;
import com.neptune.webservice.odp.ExchangeODPService;
import com.neptune.webservice.odp.ODP;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.HeadlessException;
import java.awt.Toolkit;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.FileSystems;
import java.util.ArrayList;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;
import java.util.TreeSet;
import java.util.logging.Level;
import javax.swing.BorderFactory;
import javax.swing.GroupLayout;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.SwingConstants;
import org.apache.commons.io.FileUtils;

/**
 *
 * @author ragesh.raveendran
 */
public class PlayerForm extends javax.swing.JFrame {

    /**
     * Creates new form PlayerForm
     */
    public PlayerForm(java.awt.Frame parent, boolean modal) {
        initComponentsManually();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(null);

        jLabel2.setIcon(new javax.swing.ImageIcon("D:\\Projects\\NeptunePlayer-SVN\\src\\main\\resources\\images\\playerUI.jpg")); // NOI18N
        jLabel2.setMaximumSize(new java.awt.Dimension(785, 250));
        jLabel2.setMinimumSize(new java.awt.Dimension(785, 250));
        jLabel2.setPreferredSize(new java.awt.Dimension(785, 250));
        getContentPane().add(jLabel2);
        jLabel2.setBounds(-10, 20, 780, 210);

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jTable2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable2MouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jTable2);

        getContentPane().add(jScrollPane2);
        jScrollPane2.setBounds(0, 450, 780, 40);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(0, 210, 780, 220);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTable2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable2MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jTable2MouseClicked

    private void otherStationMouseClicked(java.awt.event.MouseEvent evt) {
        NeptuneLogger.getInstance().getLogger().log(Level.INFO, "Other Station...");
        //positionFrameToScreenCentre(780, 200);
        DataHolder.odpHeaderPanel.setVisible(false);
        DataHolder.imageHolderPanel.setVisible(true);
        DataHolder.odpModeStatus = OdpEditEnum.BUILD.toString();
        DataHolder.isOdpEditLogoRequired = false;
        DataHolder.odpBuildButton.setEnabled(true);
        DataHolder.odpSaveButton.setEnabled(false);
        DataHolder.odpEditButton.setEnabled(false);
        DataHolder.odpDeleteButton.setEnabled(false);
        DataHolder.odpPlaylistButton.setEnabled(true);

        DataHolder.onDemandStationButton.setVisible(true);
        DataHolder.otherStationButton.setVisible(false);
        getContentPane().setPreferredSize(new java.awt.Dimension(1050, 200));
        setSize(new java.awt.Dimension(1050, 200));
        DataHolder.currentStation = StreamPlayer.getNotOndemandStation();
        DataHolder.playListScrollPanel.setVisible(false);
        DataHolder.ondemandCategoriesScrollPanel.setVisible(false);
        playButton.setVisible(false);
        stopButton.setVisible(false);
        DataHolder.currenttrack = null;
        DataHolder.nextTrack = null;
        DataHolder.currentTrackPath = null;
        DataHolder.currentTrackLabel.setText("Unavailable");
        DataHolder.nextTrackLabel.setText("Unavailable");
        StreamPlayer.fadeOut();
    }

    private void onDemandStationMouseClicked(java.awt.event.MouseEvent evt) {
        try {
            NeptuneLogger.getInstance().getLogger().log(Level.INFO, "On Demand Station Selected");
            List<OndemandPlaylistPanel> objects = new ArrayList<OndemandPlaylistPanel>();
            DataHolder.odpModeStatus = OdpEditEnum.OFFLINE.toString();
            DataHolder.isOdpPlaylistPlaying = false;
            HelperUtility.cleanOdpPlaylist();
            HelperUtility.getOnDemandTrackListFromUpdatedMediaUpgraded(false);
            if (DataHolder.onDemandTrackList.size() > 0) {
                DataHolder.playListScrollPanel.setVisible(true);
                DataHolder.ondemandCategories.setVisible(true);

                DataHolder.onDemandOverride = false;
                DataHolder.currentStation = StreamPlayer.getOndemandStation();
                StreamPlayer.fadeOut();
                if (DataHolder.currentStation != null) {
                    DataHolder.currentProgramme = null;
                    DataHolder.currentProgramme = StreamPlayer.getOndemandStationProgramme(DataHolder.currentStation);
                    if (DataHolder.currentProgramme != null) {
                        DataHolder.ondemandCategoryName = DataHolder.currentProgramme.getName();
                    }
                    DataHolder.playerStatusLabel.setText("Station - On Demand");
                    DataHolder.stationLabel.setText("On Demand");
                } else {
                    DataHolder.stationLabel.setText("Unavailable");
                }

                if (DataHolder.currentProgramme != null) {
                    DataHolder.programmeLabel.setText(DataHolder.currentProgramme.getName());
                } else {
                    DataHolder.programmeLabel.setText("No Program available");
                }
                if (DataHolder.onDemandTrackList.size() > 0) {
                    DataHolder.playListScrollPanel.setVisible(true);
                    DataHolder.ondemandCategoriesScrollPanel.setVisible(true);
                    playButton.setVisible(true);
                    stopButton.setVisible(true);
                    DataHolder.onDemandStationButton.setVisible(false);
                    DataHolder.otherStationButton.setVisible(true);
                }
                DataHolder.currenttrack = null;
                DataHolder.nextTrack = null;
                DataHolder.playListSelectedTrackPath = "";
                DataHolder.currentTrackLabel.setText("Unavailable");
                DataHolder.nextTrackLabel.setText("Unavailable");
                setSize(new java.awt.Dimension(1050, 545));
                DataHolder.odpHeaderPanel.setVisible(true);
                DataHolder.imageHolderPanel.setVisible(false);
            }
        } catch (Exception e) {
            NeptuneLogger.getInstance().getLogger().log(Level.SEVERE, "Error while Resizing", e);
        }
    }

    private void positionFrameToScreenCentre() throws HeadlessException {
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        //setLocation(dim.width / 2 - this.getSize().width / 2, dim.height / 2 - this.getSize().height / 2);
        setLocation(dim.width / 2 - 780 / 2, dim.height / 2 - 545 / 2);
    }

    private void positionFrameToScreenCentre(int width, int height) throws HeadlessException {
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        setLocation(dim.width / 2 - width / 2, dim.height / 2 - height / 2);
    }

    private void jLabel14MouseClicked(java.awt.event.MouseEvent evt) {
        StreamPlayer.fadeOut();
        DataHolder.currentTrackPath = DataHolder.archiveFolderPath + FileSystems.getDefault().getSeparator()
                + DataHolder.playList.getModel().getValueAt(DataHolder.playList.getSelectedRow(), 0);
        DataHolder.onDemandOverride = true;
    }

    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel nextProgramLabel;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel customerCareLabel;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel version;
    private javax.swing.JSlider volumeSlider;
    private javax.swing.JButton playButton;
    private javax.swing.JButton stopButton;
    private javax.swing.JButton userAccount;
    private javax.swing.JPanel onDemandPanel;
    private boolean isSongSelected;

    private void initComponentsManually() {
        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        getContentPane().setMaximumSize(new java.awt.Dimension(1050, 545));
        getContentPane().setMinimumSize(new java.awt.Dimension(1050, 200));
        positionFrameToScreenCentre(1050, 545);
        getContentPane().setPreferredSize(new java.awt.Dimension(1050, 200));
        setSize(new java.awt.Dimension(780, 200));
        getContentPane().setBackground(Color.BLACK);
        setResizable(false);
        setDefaultLookAndFeelDecorated(true);
        setUndecorated(true);
        //setLocationRelativeTo(null);
        GroupLayout groupLayout = new GroupLayout(getContentPane());
        setLayout(groupLayout);

        jTable1 = new javax.swing.JTable();

        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        nextProgramLabel = new javax.swing.JLabel();
        customerCareLabel = new javax.swing.JLabel();
        onDemandPanel = new javax.swing.JPanel();

        customerCareLabel.setText("Customer Care - 903-287-0770");
        customerCareLabel.setForeground(new java.awt.Color(102, 102, 102));
        customerCareLabel.setForeground(Color.LIGHT_GRAY);
        customerCareLabel.setFont(new java.awt.Font("Arial", 1, 26));
        customerCareLabel.setHorizontalAlignment(SwingConstants.CENTER);
        getContentPane().add(customerCareLabel);
        customerCareLabel.setBounds(51, 160, 680, 40);

        DataHolder.updateLogo.setIcon(null);
        DataHolder.updateLogo.setVisible(true);
        DataHolder.updateLogo.setOpaque(false);
        getContentPane().add(DataHolder.updateLogo);
        DataHolder.updateLogo.setBounds(125, 6, 25, 20);
        DataHolder.updateLogo.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                String updateString = updateMouseClicked(evt);
                if (updateString != null) {
                    final JComponent[] inputs = new JComponent[]{
                        new JLabel("Update complete. Restart Player."),};
                    JOptionPane.showMessageDialog(null, inputs, "Update Completed", JOptionPane.OK_OPTION);
                    try {
                        if (System.getProperty("os.name").toLowerCase().contains("window")) {
                            String restartSystem = DataHolder.executionFolderPath + FileSystems.getDefault().getSeparator() + "nircmd.exe exitwin reboot";
                            Runtime.getRuntime().exec(restartSystem);
                        } else {
                            Process p = Runtime.getRuntime().exec("sudo shutdown -r now");
                        }
                        System.exit(0);
                    } catch (Exception ex) {
                        NeptuneLogger.getInstance().getLogger().log(Level.SEVERE, null, ex);
                    }
                }
            }

            private String updateMouseClicked(MouseEvent evt) {
                return HelperUtility.downloadUpdateFile();
            }
        });

        DataHolder.connectivity.setText("");
        DataHolder.connectivity.setOpaque(false);
        getContentPane().add(DataHolder.connectivity);
        DataHolder.connectivity.setBounds(10, 6, 25, 20);

        DataHolder.reloadPlaylist.setText("");
        DataHolder.reloadPlaylist.setOpaque(false);
        this.getContentPane().add(DataHolder.reloadPlaylist);
        DataHolder.reloadPlaylist.setBounds(38, 3, 30, 30);
        DataHolder.reloadPlaylist.setToolTipText("Reload Playlist");
        DataHolder.reloadPlaylist.addMouseListener(new MouseAdapter() {

            public void mouseClicked(MouseEvent evt) {
                this.reloadPlaylistMouseClicked(evt);
            }

            private void reloadPlaylistMouseClicked(MouseEvent evt) {
                try {
                    new Thread(new Runnable() {
                        public void run() {
                            FileWriter odpFileWriteer = null;
                            try {

                                if (!DataHolder.odpFile.exists()) {
                                    DataHolder.odpFile.createNewFile();
                                }
                                if (DataHolder.odpPrimaryBackupFile.exists()) {
                                    FileUtils.copyFile(DataHolder.odpPrimaryBackupFile, DataHolder.odpFile);
                                } else {
                                    ExchangeODPService exchangeODPService = new ExchangeODPService();
                                    ODP odp = new ODP();
                                    odp.setPartnerName(DataHolder.configProperties.getProperty("userName"));
                                    odp.setMacID(DataHolder.macAddress);
                                    odp.setToken(DataHolder.configProperties.getProperty("DeviceToken"));
                                    ODP updatedOdp = exchangeODPService.getExchangeODPServiceSoap().getODPBackUp(odp);
                                    odpFileWriteer = new FileWriter(DataHolder.odpFile);
                                    if (null != updatedOdp.getBackUpText() && updatedOdp.getBackUpText().length() > 0) {
                                        odpFileWriteer.write(updatedOdp.getBackUpText());
                                    }
                                    NeptuneLogger.getInstance().getLogger().log(Level.INFO, "setODPBackUp() SUCCESSFULL");
                                }
                            } catch (Exception e) {
                                NeptuneLogger.getInstance().getLogger().log(Level.SEVERE, "ERROR IN setODPBackUp()", e);
                            } finally {
                                try {
                                    odpFileWriteer.close();
                                } catch (IOException ex) {
                                    NeptuneLogger.getInstance().getLogger().log(Level.SEVERE, "odpFileWriteer Close Exception", ex);
                                }
                            }
                        }
                    }).start();
                } catch (Exception e) {
                    NeptuneLogger.getInstance().getLogger().log(Level.SEVERE, "odpFileWriteer Close Exception", e);
                }
                new Thread(new ScheduledTask()).start();
                DataHolder.reloadPlaylist.setVisible(false);
            }
        });

//        manually backup the odp playlist from local machine to server through API
        DataHolder.odpBackupLabel.setText("");
        DataHolder.odpBackupLabel.setOpaque(false);
        DataHolder.odpBackupLabel.setVisible(true);
        this.getContentPane().add(DataHolder.odpBackupLabel);
        DataHolder.odpBackupLabel.setIcon(new ImageIcon(this.getClass().getResource("/images/odpbackup.png")));
        DataHolder.odpBackupLabel.setBounds(95, 6, 25, 20);
        DataHolder.odpBackupLabel.setToolTipText("Backup ODP");
        DataHolder.odpBackupLabel.addMouseListener(new MouseAdapter() {

            public void mouseClicked(MouseEvent evt) {
                this.odpBackupLabelMouseClicked(evt);
            }

            private void odpBackupLabelMouseClicked(MouseEvent evt) {
                try {
                    DataHolder.odpBackupLabel.setVisible(false);
                    new Thread(new Runnable() {
                        public void run() {
                            try {
                                if (DataHolder.odpFilePath != null) {
                                    if (DataHolder.odpFile.exists()) {
                                        FileUtils.copyFile(DataHolder.odpFile, DataHolder.odpPrimaryBackupFile);
                                        DataHolder.odpSecondaryBackupFile = new File(odpFileSecondaryBackupPath + FileSystems.getDefault().getSeparator()
                                                + DateUtil.getInstance().formatDate(new Date(), DateUtil.DATE_FORMAT_MMDDYYYY) + ".bk");
                                        if (!DataHolder.odpSecondaryBackupFile.getParentFile().exists()) {
                                            DataHolder.odpSecondaryBackupFile.getParentFile().mkdirs();
                                        }
                                        if (!DataHolder.odpSecondaryBackupFile.exists()) {
                                            DataHolder.odpSecondaryBackupFile.createNewFile();
                                        }
                                        FileUtils.copyFile(DataHolder.odpFile, DataHolder.odpSecondaryBackupFile);
                                        ExchangeODPService exchangeODPService = new ExchangeODPService();
                                        ODP odp = new ODP();
                                        odp.setPartnerName(DataHolder.configProperties.getProperty("userName"));
                                        odp.setMacID(DataHolder.macAddress);
                                        odp.setToken(DataHolder.configProperties.getProperty("DeviceToken"));
                                        BufferedReader bufferedReader = new BufferedReader(new FileReader(DataHolder.odpFile));
                                        StringBuilder stringBuilder = new StringBuilder();
                                        String line = null;
                                        while ((line = bufferedReader.readLine()) != null) {
                                            stringBuilder.append(line).append("\n");
                                        }
                                        odp.setBackUpText(stringBuilder.toString());
                                        exchangeODPService.getExchangeODPServiceSoap().setODPBackUp(odp);
                                        NeptuneLogger.getInstance().getLogger().log(Level.INFO, "SAVE --> ODPBackUp -----> SUCCESSFULL");
                                    }
                                }
                            } catch (Exception e) {
                                NeptuneLogger.getInstance().getLogger().log(Level.SEVERE, "ERROR IN setODPBackUp()", e);
                            } finally {
                                try {
                                    DataHolder.odpBackupLabel.setVisible(true);
                                    DataHolder.odpBackupLabel.setIcon(new ImageIcon(this.getClass().getResource("/images/odpbackup.png")));
                                } catch (Exception ex) {
                                    NeptuneLogger.getInstance().getLogger().log(Level.SEVERE, "odpFileWriteer Close Exception", ex);
                                }
                            }
                        }
                    }).start();
                } catch (Exception e) {
                    NeptuneLogger.getInstance().getLogger().log(Level.SEVERE, "odpFileWriteer Close Exception", e);
                }
                new Thread(new ScheduledTask()).start();
                DataHolder.odpBackupLabel.setVisible(false);
            }
        });

        DataHolder.downloadLogo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/download2.png")));
        getContentPane().add(DataHolder.downloadLogo);
        DataHolder.downloadLogo.setBounds(66, 3, 30, 30);
        DataHolder.downloadLogo.setVisible(false);

        DataHolder.playerStatusLabel.setFont(new java.awt.Font("Arial", 0, 24)); // NOI18N
        DataHolder.playerStatusLabel.setForeground(java.awt.SystemColor.inactiveCaptionText);
        DataHolder.playerStatusLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        getContentPane().add(DataHolder.playerStatusLabel);
        DataHolder.playerStatusLabel.setBounds(410, 10, 350, 70);

        DataHolder.onDemandStationButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/ondemand_off.jpg"))); // NOI18N
        DataHolder.onDemandStationButton.setFocusPainted(false);
        DataHolder.onDemandStationButton.setToolTipText("Play OnDemand Station");
        DataHolder.onDemandStationButton.setRequestFocusEnabled(false);
        DataHolder.onDemandStationButton.setRolloverEnabled(false);
        DataHolder.onDemandStationButton.setVisible(true);
        DataHolder.onDemandStationButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                onDemandStationMouseClicked(evt);
            }
        });
        getContentPane().add(DataHolder.onDemandStationButton);
        DataHolder.onDemandStationButton.setBounds(640, 173, 130, 22);

        userAccount = new JButton();
        userAccount.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/UserAccount.png"))); // NOI18N
        userAccount.setToolTipText("Change User");
        userAccount.setLabel("");
        userAccount.setRequestFocusEnabled(false);
        userAccount.setRolloverEnabled(false);
        userAccount.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                userAccountButtonClicked(evt);
            }

            private void userAccountButtonClicked(MouseEvent evt) {
                try {
                    final JComponent inputs
                            = new JLabel("Do you really want to change user");
                    int userInput = JOptionPane.showConfirmDialog(
                            inputs,
                            "Would you like to change user account?",
                            "Change User",
                            JOptionPane.YES_NO_OPTION);
                    if (userInput == 0) {
                        if ((new File(DataHolder.propFileName)).exists()) {
                            if (new File(DataHolder.propFileName).delete()) {
                                new File(DataHolder.contentSyncFile).delete();
                                if (System.getProperty("os.name").toLowerCase().contains("window")) {
                                    String restartSystem = DataHolder.executionFolderPath + FileSystems.getDefault().getSeparator() + "nircmd.exe exitwin reboot";
                                    Runtime.getRuntime().exec(restartSystem);
                                } else {
                                    Process p = Runtime.getRuntime().exec("sudo shutdown -r now");
                                }
                                System.exit(0);
                            }
                        }
                    }
                } catch (Exception ex) {
                    NeptuneLogger.getInstance().getLogger().log(Level.SEVERE, null, ex);
                }
            }
        });
        getContentPane().add(userAccount);
        userAccount.setBounds(5, 169, 30, 30);

        DataHolder.otherStationButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/ondemand_on.jpg"))); // NOI18N
        DataHolder.otherStationButton.setToolTipText("Play Other Stations");
        DataHolder.otherStationButton.setLabel("");
        DataHolder.otherStationButton.setRequestFocusEnabled(false);
        DataHolder.otherStationButton.setRolloverEnabled(false);
        DataHolder.otherStationButton.setBackground(Color.black);
        DataHolder.otherStationButton.setVisible(false);
        DataHolder.otherStationButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                otherStationMouseClicked(evt);
            }
        });
        getContentPane().add(DataHolder.otherStationButton);
        DataHolder.otherStationButton.setBounds(640, 173, 130, 22);

        version = new javax.swing.JLabel();
        version.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        version.setForeground(new java.awt.Color(102, 102, 102));
        version.setText("Version " + getClass().getPackage().getImplementationVersion());
        version.setToolTipText("");
        version.setVisible(true);
        getContentPane().add(version);
        version.setBounds(132, 106, 200, 14);

        jLabel7.setText("Station      ");
        getContentPane().add(jLabel7);
        jLabel7.setBounds(410, 70, 150, 17);
        jLabel7.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(51, 51, 51));
        DataHolder.stationLabel.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        DataHolder.stationLabel.setForeground(new java.awt.Color(51, 51, 51));
        DataHolder.stationLabel.setName("Station"); // NOI18N
        getContentPane().add(DataHolder.stationLabel);
        DataHolder.stationLabel.setBounds(505, 70, 290, 17);

        jLabel8.setText("Program      ");
        getContentPane().add(jLabel8);
        jLabel8.setBounds(410, 80, 150, 30);
        jLabel8.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(51, 51, 51));
        DataHolder.programmeLabel.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        DataHolder.programmeLabel.setForeground(new java.awt.Color(51, 51, 51));
        DataHolder.programmeLabel.setName("Programme"); // NOI18N
        getContentPane().add(DataHolder.programmeLabel);
        DataHolder.programmeLabel.setBounds(505, 80, 380, 30);

        nextProgramLabel.setText("Next Program ");
        getContentPane().add(nextProgramLabel);
        nextProgramLabel.setBounds(410, 104, 150, 14);
        nextProgramLabel.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        nextProgramLabel.setForeground(new java.awt.Color(51, 51, 51));
        DataHolder.nextProgrammeLabel.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        DataHolder.nextProgrammeLabel.setForeground(new java.awt.Color(51, 51, 51));
        DataHolder.nextProgrammeLabel.setName("Track"); // NOI18N
        getContentPane().add(DataHolder.nextProgrammeLabel);
        DataHolder.nextProgrammeLabel.setBounds(505, 104, 275, 14);

        jLabel9.setText("Track             ");
        getContentPane().add(jLabel9);
        jLabel9.setBounds(410, 120, 150, 14);
        jLabel9.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(51, 51, 51));
        DataHolder.currentTrackLabel.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        DataHolder.currentTrackLabel.setForeground(new java.awt.Color(51, 51, 51));
        DataHolder.currentTrackLabel.setName("Track"); // NOI18N
        getContentPane().add(DataHolder.currentTrackLabel);
        DataHolder.currentTrackLabel.setBounds(505, 120, 275, 14);

        jLabel11.setText("Next Track        ");
        getContentPane().add(jLabel11);
        jLabel11.setBounds(410, 135, 150, 14);
        jLabel11.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(51, 51, 51));
        DataHolder.nextTrackLabel.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        DataHolder.nextTrackLabel.setForeground(new java.awt.Color(51, 51, 51));
        DataHolder.nextTrackLabel.setName("Track");
        getContentPane().add(DataHolder.nextTrackLabel);
        DataHolder.nextTrackLabel.setBounds(505, 135, 275, 14);

        DataHolder.playList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
//                DataHolder.isOdpEditMode = false;
                switch (OdpEditEnum.valueOf(DataHolder.odpModeStatus.toUpperCase())) {
//==============================================================================================================================================
                    case LIST:
                        PlayListUtils.playListMouseClickedWhenOnDemandOverrideIsOnInOdpListMode(evt);
                        break;
//==============================================================================================================================================                        
                    case EDIT:
                        PlayListUtils.playListMouseClickedInOdpEditModeStatus(evt);
                        break;
//==============================================================================================================================================                                                
                    case BUILD:
                        if (null == DataHolder.odpMedia) {
                            HelperUtility.initializeODPMedia();
                        }
                        DataHolder.odpPlaylistModel = (javax.swing.table.DefaultTableModel) DataHolder.odpPlayList.getModel();
                        OndemandPlaylistPanel panel = (OndemandPlaylistPanel) DataHolder.playList.getValueAt(
                                DataHolder.playList.getSelectedRow(), DataHolder.playList.getSelectedColumn());
                        if (null != panel) {
//                            switch (HelperUtility.covertBooleanToInt(HelperUtility.addOdpMaxtime(panel.getPlayTimeLabel().getText()))) {
//                                case 1:
                            com.neptune.schema.Odpmedia.Playlist.Track track = new com.neptune.schema.Odpmedia.Playlist.Track();
                            track.setName(panel.getSongTitleLabel().getName());
                            track.setLabel(panel.getSongTitleLabel().getText());
                            track.setId(Long.parseLong(String.valueOf(DataHolder.odpLastRow)));
                            track.setTime(panel.getPlayTimeLabel().getText());
                            if (null == DataHolder.odpTrackList) {
                                DataHolder.odpTrackList = new LinkedList<Odpmedia.Playlist.Track>();
                            }
                            if (!DataHolder.odpTrackList.contains(track)) {
                                if (DataHolder.odpLastRow == DataHolder.odpPlayList.getRowCount()) {
                                    DataHolder.odpPlaylistModel.addRow(new Object[]{});
                                }
                                DataHolder.odpTrackList.add(track);
                                HelperUtility.addOdpMaxtime(panel.getPlayTimeLabel().getText());
                                DataHolder.odpPlaylistModel.setValueAt(panel.getSongTitleLabel().getText(), DataHolder.odpLastRow, 0);
                                DataHolder.odpLastRow++;
                            }
//                                    break;
//                                case 0:
//                                    JOptionPane.showMessageDialog(null, "Your On Demand Playlist is at maximum length. Please remove or replace content to continue.", "", JOptionPane.WARNING_MESSAGE);
//                                    break;
//                            }
                        }
                        break;
//==============================================================================================================================================                        
                    case OFFLINE:
                        PlayListUtils.playListMouseClicked(evt);
                        if (evt.getClickCount() == 2) {
                            if (DataHolder.playListSelectedTrackPath != null && !DataHolder.playListSelectedTrackPath.isEmpty()) {
                                try {
                                    if (DataHolder.playListSelectedTrackPath.equalsIgnoreCase(DataHolder.currentTrackPath) && DataHolder.isPlaying) {
                                        return;
                                    }
                                    StreamPlayer.fadeOut();
                                    if (DataHolder.playListSelectedTrackPath != null) {
                                        if (!DataHolder.playListSelectedTrackPath.isEmpty()) {
                                            DataHolder.currentTrackPath = DataHolder.playListSelectedTrackPath;
                                            DataHolder.programmeLabel.setText(DataHolder.ondemandCategoryName);
                                        }
                                    }
                                } catch (Exception e) {
                                    e.printStackTrace();
                                } finally {
                                    DataHolder.onDemandOverride = true;
                                }
                            }
                        }
                        break;
                }
            }

        });

        playButton = new javax.swing.JButton();
        playButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/playv4.png"))); // NOI18N
        playButton.setVisible(false);
        getContentPane().add(playButton);
        playButton.setBounds(190, 134, 30, 29);
        playButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                try {
                    switch (OdpEditEnum.valueOf(DataHolder.odpModeStatus.toUpperCase())) {
                        case LIST:
                            PlayListUtils.remapOdpPlaylist();
                            StreamPlayer.fadeOut();
                            DataHolder.isOdpPlaylistPlaying = true;
                            DataHolder.currentTrackPath = null;
                            DataHolder.onDemandOverride = true;
                            DataHolder.odpCurrentTrackId = 0L;
                            break;
                        case OFFLINE:
                            if (DataHolder.playListSelectedTrackPath.equalsIgnoreCase(DataHolder.currentTrackPath) && DataHolder.isPlaying) {
                                return;
                            }
                            break;
                    }
                    playButtonMouseClicked(evt);
                } catch (Exception e) {
                    e.printStackTrace();
                }

            }

            private void playButtonMouseClicked(MouseEvent evt) {
                StreamPlayer.fadeOut();
                if (DataHolder.playListSelectedTrackPath != null) {
                    if (!DataHolder.playListSelectedTrackPath.isEmpty()) {
                        DataHolder.currentTrackPath = DataHolder.playListSelectedTrackPath;
                        DataHolder.programmeLabel.setText(DataHolder.ondemandCategoryName);
                    }
                }
                DataHolder.onDemandOverride = true;
            }
        });

        stopButton = new javax.swing.JButton();
        stopButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/pausev4.png"))); // NOI18N
        stopButton.setVisible(false);
        getContentPane().add(stopButton);
        stopButton.setBounds(225, 134, 30, 29);
        stopButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                stopButtonMouseClicked(evt);
            }

            public void stopButtonMouseClicked(MouseEvent evt) {
                StreamPlayer.fadeOut();
                DataHolder.isPlaying = false;
                DataHolder.playerStatusLabel.setText("Player stopped");
                DataHolder.onDemandOverride = false;
                DataHolder.currentTrackLabel.setText("Stopped");
                DataHolder.nextTrackLabel.setText("Stopped");
                DataHolder.currenttrack = null;
                DataHolder.nextTrack = null;
                DataHolder.playListSelectedTrackPath = "";
                StreamPlayer.fadeOut();
                switch (OdpEditEnum.valueOf(DataHolder.odpModeStatus)) {
                    case OFFLINE:

                        break;
                    case BUILD:
                    case EDIT:
                    case LIST:
                    default:
                        DataHolder.odpEditButton.setEnabled(false);
                        DataHolder.odpDeleteButton.setEnabled(false);
                        DataHolder.odpSaveButton.setEnabled(false);
                        DataHolder.odpBuildButton.setEnabled(true);
                        onDemandStationMouseClicked(null);
                        break;
                }
            }
        });

        DataHolder.downloadFileDetails.setText("");
        getContentPane().add(DataHolder.downloadFileDetails);
        DataHolder.downloadFileDetails.setBounds(380, 90, 370, 20);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(null);

        DataHolder.jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/playerUI.jpg")));
        getContentPane().add(DataHolder.jLabel1);
        DataHolder.jLabel1.setBorder(BorderFactory.createEtchedBorder(Color.black, Color.black));
        DataHolder.jLabel1.setBounds(0, 0, 779, 200);

        DataHolder.playListScrollPanel.setViewportView(DataHolder.playList);
        DataHolder.playListScrollPanel.setBounds(0, 200, 780, 305);
        DataHolder.playListScrollPanel.setVisible(true);
        DataHolder.playListScrollPanel.setBorder(BorderFactory.createEtchedBorder(Color.black, Color.black));
        getContentPane().add(DataHolder.playListScrollPanel);

        DataHolder.ondemandCategoriesScrollPanel.setViewportView(DataHolder.ondemandCategories);
        DataHolder.ondemandCategoriesScrollPanel.setBounds(0, 504, 782, 40);
        DataHolder.ondemandCategoriesScrollPanel.setVisible(true);
        DataHolder.ondemandCategoriesScrollPanel.setBorder(BorderFactory.createEtchedBorder(Color.black, Color.black));
        getContentPane().add(DataHolder.ondemandCategoriesScrollPanel);
        DataHolder.ondemandCategories.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                MouseClickEventMethods.ondemandCategoriesMouseClicked(evt);
            }
        });
        DataHolder.odpScrollPanel.setViewportView(DataHolder.odpPlayList);
        DataHolder.odpScrollPanel.setBounds(782, 198, 280, 306);
        DataHolder.odpScrollPanel.setVisible(true);
        DataHolder.odpScrollPanel.setBorder(BorderFactory.createEtchedBorder(Color.black, Color.black));
        getContentPane().add(DataHolder.odpScrollPanel);

        DataHolder.odpHeaderPanel.setBounds(782, 2, 266, 197);
        DataHolder.odpHeaderPanel.setVisible(false);
        getContentPane().add(DataHolder.odpHeaderPanel);

        DataHolder.imageHolderPanelLabel.setBounds(782, 2, 266, 197);
        DataHolder.imageHolderPanelLabel.setVisible(true);
//        DataHolder.imageHolderPanelLabel.setIcon(new ImageIcon(getClass().getResource("/images/clogo_filler.jpg")));
        DataHolder.imageHolderPanelLabel.setIcon(new ImageIcon(getClass().getResource("/images/clogo_filler.jpg")));
        getContentPane().add(DataHolder.imageHolderPanelLabel);

        DataHolder.odpPlaylistButton.setBounds(782, 504, 266, 40);
        DataHolder.odpPlaylistButton.setVisible(true);
        getContentPane().add(DataHolder.odpPlaylistButton);
//        List all the saved ODP
        DataHolder.odpPlaylistButton.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                MouseClickEventMethods.odpPlayListButtonMouseClickeEvent(evt);
            }
        });

        DataHolder.odpPlayList.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                MouseClickEventMethods.odpPlaylistMouseClickEvent(evt);
            }
        }
        );

        pack();
    }// <
    /**
     * @param args the command line arguments
     */
        //    public static void main(String args[]) {
    //        /* Set the Nimbus look and feel */
    //        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
    //        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
    //         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
    //         */
    //        try {
    //            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
    //                if ("Nimbus".equals(info.getName())) {
    //                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
    //                    break;
    //                }
    //            }
    //        } catch (ClassNotFoundException ex) {
    //            java.util.logging.Logger.getLogger(PlayerForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    //        } catch (InstantiationException ex) {
    //            java.util.logging.Logger.getLogger(PlayerForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    //        } catch (IllegalAccessException ex) {
    //            java.util.logging.Logger.getLogger(PlayerForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    //        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
    //            java.util.logging.Logger.getLogger(PlayerForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    //        }
    //        //</editor-fold>
    //
    //        /* Create and display the form */
    //        java.awt.EventQueue.invokeLater(new Runnable() {
    //            public void run() {
    //                new PlayerForm().setVisible(true);
    //            }
    //        });
    //    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    // End of variables declaration//GEN-END:variables
}
