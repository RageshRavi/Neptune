/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.neptune.controller;

import com.neptune.common.DataHolder;
import com.neptune.player.StreamPlayer;
import com.neptune.util.HelperUtility;
import com.neptune.util.NeptuneLogger;
import java.awt.Color;
import java.awt.event.MouseEvent;
import java.io.File;
import java.nio.file.FileSystems;
import java.util.logging.Level;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.Clip;
import javax.sound.sampled.FloatControl;
import javax.sound.sampled.LineUnavailableException;
import javax.swing.BorderFactory;
import javax.swing.JButton;
import javax.swing.JComponent;
import static javax.swing.JFrame.setDefaultLookAndFeelDecorated;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.SwingConstants;
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author ragesh.raveendran
 */
public class PlayerWidget extends javax.swing.JFrame {

    /**
     * Creates new form PlayerWidget
     */
    public PlayerWidget(java.awt.Frame parent, boolean modal) {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    private void otherStationMouseClicked(java.awt.event.MouseEvent evt) {
        NeptuneLogger.getInstance().getLogger().log(Level.INFO, "Other Station...");
        DataHolder.currentStation = StreamPlayer.getNotOndemandStation();
        DataHolder.playListScrollPanel.setVisible(false);
        playButton.setVisible(false);
        stopButton.setVisible(false);
        DataHolder.currenttrack = null;
        DataHolder.nextTrack = null;
        DataHolder.currentTrackPath = null;
        DataHolder.currentTrackLabel.setText("Unavailable");
        DataHolder.nextTrackLabel.setText("Unavailable");
        StreamPlayer.stop();
    }

    private void onDemandStationMouseClicked(java.awt.event.MouseEvent evt) {
        NeptuneLogger.getInstance().getLogger().log(Level.INFO, "On Demand Station Selected");
        DataHolder.onDemandOverride = false;
        DataHolder.currentStation = StreamPlayer.getOndemandStation();
        StreamPlayer.stop();
        if (DataHolder.currentStation != null) {
            DataHolder.currentProgramme = StreamPlayer.getOndemandStationProgramme(DataHolder.currentStation);
            DataHolder.playerStatusLabel.setText("Station - Ondemand");
            DataHolder.stationLabel.setText("On Demand");
        } else {
            DataHolder.stationLabel.setText("Unavailable");
        }

        if (DataHolder.currentProgramme != null) {
            DataHolder.programmeLabel.setText(DataHolder.currentProgramme.getName());
        } else {
            DataHolder.programmeLabel.setText("No Program available");
        }
        if (DataHolder.onDemandTrackList.size() > 0) {
            javax.swing.table.DefaultTableModel tableModel = (javax.swing.table.DefaultTableModel) DataHolder.playList.getModel();
            DataHolder.playListScrollPanel.setVisible(true);
            playButton.setVisible(true);
            stopButton.setVisible(true);
        }
        DataHolder.currenttrack = null;
        DataHolder.nextTrack = null;
        DataHolder.playListSelectedTrackPath = "";
        DataHolder.currentTrackLabel.setText("Unavailable");
        DataHolder.nextTrackLabel.setText("Unavailable");
    }

    private void volumeSliderStateChanged(javax.swing.event.ChangeEvent evt) {
        try {
            Clip clip = AudioSystem.getClip();
            FloatControl gainControl = (FloatControl) clip.getControl(FloatControl.Type.MASTER_GAIN);
            gainControl.setValue(volumeSlider.getValue());
            clip.start();

        } catch (LineUnavailableException ex) {
            ex.printStackTrace();
        }
    }

    private void playListMouseClicked(java.awt.event.MouseEvent evt) {
        DataHolder.playListSelectedTrackPath = DataHolder.archiveFolderPath + FileSystems.getDefault().getSeparator()
                + DataHolder.playList.getModel().getValueAt(DataHolder.playList.getSelectedRow(), 0);
    }

    private void jLabel14MouseClicked(java.awt.event.MouseEvent evt) {
        StreamPlayer.stop();
        DataHolder.currentTrackPath = DataHolder.archiveFolderPath + FileSystems.getDefault().getSeparator()
                + DataHolder.playList.getModel().getValueAt(DataHolder.playList.getSelectedRow(), 0);
        DataHolder.onDemandOverride = true;
    }

    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel nextProgramLabel;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel customerCareLabel;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel version;
    private javax.swing.JSlider volumeSlider;
    private javax.swing.JLabel playButton;
    private javax.swing.JLabel stopButton;
    private javax.swing.JButton userAccount;
    private boolean isSongSelected;

    private void initComponents() {
        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(780, 355));
        setResizable(false);
        setDefaultLookAndFeelDecorated(true);
        setUndecorated(true);
        setLocationRelativeTo(null);

        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        nextProgramLabel = new javax.swing.JLabel();
        customerCareLabel = new javax.swing.JLabel();

        customerCareLabel.setText("Customer Care - 844-255-0603");
        customerCareLabel.setForeground(new java.awt.Color(102, 102, 102));
        customerCareLabel.setFont(new java.awt.Font("Arial", 1, 26));
        customerCareLabel.setHorizontalAlignment(SwingConstants.CENTER);
        getContentPane().add(customerCareLabel);
        customerCareLabel.setBounds(51, 310, 680, 40);

        DataHolder.updateLogo.setIcon(null);
        DataHolder.updateLogo.setVisible(true);
        DataHolder.updateLogo.setOpaque(false);
        getContentPane().add(DataHolder.updateLogo);
        DataHolder.updateLogo.setBounds(670, 15, 25, 20);
        DataHolder.updateLogo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                String updateString = updateMouseClicked(evt);
                if (updateString != null) {
                    final JComponent[] inputs = new JComponent[]{
                        new JLabel("Update complete. Restart Player."),};
                    JOptionPane.showMessageDialog(null, inputs, "Update Completed", JOptionPane.OK_OPTION);
                    try {
//                        Process p = Runtime.getRuntime().exec("java -jar " + DataHolder.executionFolderPath + FileSystems.getDefault().getSeparator() + updateString.split(";")[1]);
                        Process p = Runtime.getRuntime().exec("sudo shutdown -r now");
                        System.exit(0);
                    } catch (Exception ex) {
                        NeptuneLogger.getInstance().getLogger().log(Level.SEVERE, null, ex);
                    }
                }
            }

            private String updateMouseClicked(MouseEvent evt) {
                return HelperUtility.downloadUpdateFile();
            }
        });

        DataHolder.connectivity.setText("");
        DataHolder.connectivity.setOpaque(false);
        getContentPane().add(DataHolder.connectivity);
        DataHolder.connectivity.setBounds(730, 15, 25, 20);

        DataHolder.downloadLogo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/download2.png")));
        getContentPane().add(DataHolder.downloadLogo);
        DataHolder.downloadLogo.setBounds(700, 10, 30, 30);
        DataHolder.downloadLogo.setVisible(false);

        DataHolder.playerStatusLabel.setFont(new java.awt.Font("Arial", 0, 24)); // NOI18N
        DataHolder.playerStatusLabel.setForeground(java.awt.SystemColor.inactiveCaptionText);
        DataHolder.playerStatusLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        getContentPane().add(DataHolder.playerStatusLabel);
        DataHolder.playerStatusLabel.setBounds(380, 40, 350, 70);

        DataHolder.onDemandStationButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/2.png"))); // NOI18N
        DataHolder.onDemandStationButton.setFocusPainted(false);
        DataHolder.onDemandStationButton.setToolTipText("Play OnDemand Station");
        DataHolder.onDemandStationButton.setRequestFocusEnabled(false);
        DataHolder.onDemandStationButton.setRolloverEnabled(false);
//        DataHolder.onDemandStationButton.setBorder(BorderFactory.createEtchedBorder());

        DataHolder.onDemandStationButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                onDemandStationMouseClicked(evt);
            }
        });
        getContentPane().add(DataHolder.onDemandStationButton);
        DataHolder.onDemandStationButton.setBounds(20, 310, 30, 30);

        userAccount = new JButton();
        userAccount.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/UserAccount.png"))); // NOI18N
        userAccount.setToolTipText("Change User");
        userAccount.setLabel("");
        userAccount.setRequestFocusEnabled(false);
        userAccount.setRolloverEnabled(false);
        userAccount.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                userAccountButtonClicked(evt);
            }

            private void userAccountButtonClicked(MouseEvent evt) {
                try {
                    final JComponent inputs
                            = new JLabel("Do you really want to change user");
                    int userInput = JOptionPane.showConfirmDialog(
                            inputs,
                            "Would you like to change user account?",
                            "Change User",
                            JOptionPane.YES_NO_OPTION);
                    if (userInput == 0) {
                        if ((new File(DataHolder.propFileName)).exists()) {
                            if (new File(DataHolder.propFileName).delete()) {
                                new File(DataHolder.contentSyncFile).delete();
                                if (System.getProperty("os.name").toLowerCase().contains("window")) {
                                    String restartSystem = DataHolder.executionFolderPath+ FileSystems.getDefault().getSeparator() +"nircmd.exe exitwin reboot";    
                                    Runtime.getRuntime().exec(restartSystem);
                                } else {
                                    Process p = Runtime.getRuntime().exec("sudo shutdown -r now");
                                }
                                System.exit(0);
                            }
                        }
                    }
                } catch (Exception ex) {
                    NeptuneLogger.getInstance().getLogger().log(Level.SEVERE, null, ex);
                }
            }
        });
        getContentPane().add(userAccount);
        userAccount.setBounds(690, 310, 30, 30);

        DataHolder.otherStationButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/3.png"))); // NOI18N
        DataHolder.otherStationButton.setToolTipText("Play Other Stations");
        DataHolder.otherStationButton.setLabel("");
        DataHolder.otherStationButton.setRequestFocusEnabled(false);
        DataHolder.otherStationButton.setRolloverEnabled(false);
        DataHolder.otherStationButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                otherStationMouseClicked(evt);
            }
        });
        getContentPane().add(DataHolder.otherStationButton);
        DataHolder.otherStationButton.setBounds(730, 310, 30, 30);

        version = new javax.swing.JLabel();
        version.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        version.setForeground(new java.awt.Color(102, 102, 102));
        version.setText("Version " + getClass().getPackage().getImplementationVersion());
        version.setToolTipText("");
        version.setVisible(true);
        getContentPane().add(version);
        version.setBounds(90, 90, 200, 14);

        jLabel7.setText("Station      ");
        getContentPane().add(jLabel7);
        jLabel7.setBounds(380, 170, 150, 17);
        jLabel7.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(51, 51, 51));
        DataHolder.stationLabel.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        DataHolder.stationLabel.setForeground(new java.awt.Color(51, 51, 51));
        DataHolder.stationLabel.setName("Station"); // NOI18N
        getContentPane().add(DataHolder.stationLabel);
        DataHolder.stationLabel.setBounds(475, 170, 290, 17);

        jLabel8.setText("Program      ");
        getContentPane().add(jLabel8);
        jLabel8.setBounds(380, 182, 150, 30);
        jLabel8.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(51, 51, 51));
        DataHolder.programmeLabel.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        DataHolder.programmeLabel.setForeground(new java.awt.Color(51, 51, 51));
        DataHolder.programmeLabel.setName("Programme"); // NOI18N
        getContentPane().add(DataHolder.programmeLabel);
        DataHolder.programmeLabel.setBounds(475, 182, 380, 30);

        nextProgramLabel.setText("Next Program ");
        getContentPane().add(nextProgramLabel);
        nextProgramLabel.setBounds(380, 210, 150, 14);
        nextProgramLabel.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        nextProgramLabel.setForeground(new java.awt.Color(51, 51, 51));
        DataHolder.nextProgrammeLabel.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        DataHolder.nextProgrammeLabel.setForeground(new java.awt.Color(51, 51, 51));
        DataHolder.nextProgrammeLabel.setName("Track"); // NOI18N
        getContentPane().add(DataHolder.nextProgrammeLabel);
        DataHolder.nextProgrammeLabel.setBounds(475, 210, 275, 14);

        jLabel9.setText("Track             ");
        getContentPane().add(jLabel9);
        jLabel9.setBounds(380, 228, 150, 14);
        jLabel9.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(51, 51, 51));
        DataHolder.currentTrackLabel.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        DataHolder.currentTrackLabel.setForeground(new java.awt.Color(51, 51, 51));
        DataHolder.currentTrackLabel.setName("Track"); // NOI18N
        getContentPane().add(DataHolder.currentTrackLabel);
        DataHolder.currentTrackLabel.setBounds(475, 228, 275, 14);

        jLabel11.setText("Next Track        ");
        getContentPane().add(jLabel11);
        jLabel11.setBounds(380, 244, 150, 14);
        jLabel11.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(51, 51, 51));
        DataHolder.nextTrackLabel.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        DataHolder.nextTrackLabel.setForeground(new java.awt.Color(51, 51, 51));
        DataHolder.nextTrackLabel.setName("Track");
        getContentPane().add(DataHolder.nextTrackLabel);
        DataHolder.nextTrackLabel.setBounds(475, 244, 275, 14);

        DataHolder.playList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                playListMouseClicked(evt);
            }
        });

        getContentPane().add(DataHolder.playListScrollPanel);
        DataHolder.playListScrollPanel.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        DataHolder.playListScrollPanel.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED);
        DataHolder.playListScrollPanel.setBounds(30, 125, 300, 135);

        playButton = new javax.swing.JLabel();
        playButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/play(1).gif"))); // NOI18N
//        playButton.setText("PlayButton");
        playButton.setVisible(false);
        getContentPane().add(playButton);
        playButton.setBounds(120, 260, 40, 46);
        playButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                playButtonMouseClicked(evt);
            }

            private void playButtonMouseClicked(MouseEvent evt) {
                DataHolder.playerStatusLabel.setText("Media changing");
                StreamPlayer.stop();
                if (!DataHolder.playListSelectedTrackPath.isEmpty()) {
                    DataHolder.currentTrackPath = DataHolder.playListSelectedTrackPath;
                }
                DataHolder.onDemandOverride = true;
            }
        });

        stopButton = new javax.swing.JLabel();
        stopButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/stop(1).gif"))); // NOI18N
//        stopButton.setText("PlayButton");
        stopButton.setVisible(false);
        getContentPane().add(stopButton);
        stopButton.setBounds(170, 260, 40, 46);
        stopButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                stopButtonMouseClicked(evt);
            }

            private void stopButtonMouseClicked(MouseEvent evt) {
                DataHolder.playerStatusLabel.setText("Player stopped");
                DataHolder.onDemandOverride = false;
                DataHolder.currentTrackLabel.setText("Stopped");
                DataHolder.nextTrackLabel.setText("Stopped");
                DataHolder.currenttrack = null;
                DataHolder.nextTrack = null;
//                DataHolder.playListSelectedTrackPath = "";
                StreamPlayer.stop();
            }
        });

        DataHolder.downloadFileDetails.setText("");
        getContentPane().add(DataHolder.downloadFileDetails);
        DataHolder.downloadFileDetails.setBounds(380, 90, 370, 20);

        DataHolder.jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/1.jpg"))); // NOI18N
        getContentPane().add(DataHolder.jLabel1);
        DataHolder.jLabel1.setBorder(BorderFactory.createEtchedBorder(Color.black, Color.black));
        DataHolder.jLabel1.setBounds(0, 0, 790, 357);

        pack();
    }
}
